name: Release

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Output Project Name
        id: project_name
        shell: bash
        run: |
          export NAME="${GITHUB_REPOSITORY#*/}"
          echo "name=${NAME}" >> $GITHUB_OUTPUT
      - name: Display Project Name
        run: |
          echo "Building Project '${{ steps.project_name.outputs.name }}'"

      # Installing C Compiler
      - name: Install GCC
        run: |
          sudo apt-get install -y gcc

      # Install Lua and LuaRocks
      - name: Install Lua and LuaRocks
        run: |
          sudo apt-get update
          sudo apt-get install -y lua5.1 liblua5.1-0-dev luarocks
      # Set up environment for Lua and LuaRocks
      - name: Set PATH and environment variables for Lua and LuaRocks
        shell: bash
        run: |
          echo "$HOME/.luarocks/bin" >> $GITHUB_PATH
          echo "LUA_PATH=$HOME/.luarocks/share/lua/5.1/?.lua;$HOME/.luarocks/share/lua/5.1/?/init.lua;;" >> $GITHUB_ENV
          echo "LUA_CPATH=$HOME/.luarocks/lib/lua/5.1/?.so;;" >> $GITHUB_ENV
      - name: Install Lua Packages
        run: |
          luarocks --local install yuescript
          luarocks --local make --dev

      # Compile yue.so for Linux
      - name: Compile yue.so
        run: |
          gcc -shared -o src/yue.so -fPIC $(pkg-config --cflags lua5.1) $(pkg-config --libs lua5.1)

      # Cross-compile yue.dll for Windows
      # Install MinGW for cross-compilation
      - name: Install MinGW for cross-compilation
        run: |
          sudo apt-get install -y mingw-w64

      # Download and set up Lua for Windows
      - name: Download and set up Lua for Windows
        run: |
          wget https://sourceforge.net/projects/luabinaries/files/5.1.5/Windows%20Libraries/Dynamic/lua-5.1.5_Win64_dllw4_lib.zip
          unzip lua-5.1.5_Win64_dllw4_lib.zip -d lua_win64
          sudo cp lua_win64/lua5.1.dll /usr/x86_64-w64-mingw32/lib/
          sudo cp lua_win64/liblua5.1.a /usr/x86_64-w64-mingw32/lib/
          wget https://www.lua.org/ftp/lua-5.1.5.tar.gz
          tar xzf lua-5.1.5.tar.gz
          sudo cp -r lua-5.1.5/src/*.h /usr/x86_64-w64-mingw32/include/

      # Cross-compile yue.dll for Windows
      - name: Cross-compile yue.dll
        run: |
          x86_64-w64-mingw32-gcc -shared -o src/yue.dll -I/usr/x86_64-w64-mingw32/include -L/usr/x86_64-w64-mingw32/lib -llua5.1 -static-libgcc -static-libstdc++

      # Test and compile
      - name: Test Project
        run: |
          yue -e build.yue src -t
      - name: Compile Project
        run: |
          yue -e build.yue src -d -y

      # Prepare LÖVE package
      - name: Prepare LÖVE package
        run: |
          mkdir -p love_package
          cp -r src/* love_package/
          if [ -d "love_package/util" ]; then
            cp -r love_package/util/* love_package/
            rm -rf love_package/util
          fi
          # Copy yue.so and yue.dll into the love_package
          cp src/yue.so love_package/
          cp src/yue.dll love_package/
          cd love_package
          7z a ../${{ steps.project_name.outputs.name }}.love ./*
          cd ..

      # Debug steps
      # - name: Debug - List working directory contents
      #   run: |
      #     pwd
      #     ls -la
      # - name: Debug - List contents of LÖVE package
      #   run: |
      #     7z l ${{ steps.project_name.outputs.name }}.love
      # - name: Debug - Extract and list LÖVE package contents
      #   run: |
      #     mkdir love_contents
      #     7z x ${{ steps.project_name.outputs.name }}.love -olove_contents
      #     ls -laR love_contents

      # Extract LÖVE package
      - name: Extract LÖVE package
        run: |
          mkdir love_source
          7z x ${{ steps.project_name.outputs.name }}.love -olove_source

      # Build LÖVE applications
      - name: Build LÖVE applications
        uses: nhartland/love-build@master
        with:
          app_name: ${{ steps.project_name.outputs.name }}
          love_version: "11.5"
          source_dir: ./love_source

      # Copy yue.so and yue.dll to release directory
      - name: Copy yue.so and yue.dll to release directory
        run: |
          sudo chmod -R 777 release/
          cp src/yue.so release/
          cp src/yue.dll release/

      # Upload artifacts
      - name: Upload built applications
        uses: actions/upload-artifact@v4
        with:
          name: built-applications
          path: release/
